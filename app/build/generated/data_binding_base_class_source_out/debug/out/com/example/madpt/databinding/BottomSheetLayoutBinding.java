// Generated by view binder compiler. Do not edit!
package com.example.madpt.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.madpt.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BottomSheetLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayoutCompat rootView;

  @NonNull
  public final LinearLayoutCompat bottomSheet;

  @NonNull
  public final Spinner spnDevice;

  @NonNull
  public final Spinner spnModel;

  @NonNull
  public final Spinner spnTracker;

  @NonNull
  public final SwitchCompat swPoseClassification;

  @NonNull
  public final TextView tvClassificationValue1;

  @NonNull
  public final TextView tvClassificationValue2;

  @NonNull
  public final TextView tvClassificationValue3;

  @NonNull
  public final TextView tvFps;

  @NonNull
  public final TextView tvScore;

  @NonNull
  public final RelativeLayout vClassificationOption;

  @NonNull
  public final LinearLayout vTrackerOption;

  private BottomSheetLayoutBinding(@NonNull LinearLayoutCompat rootView,
      @NonNull LinearLayoutCompat bottomSheet, @NonNull Spinner spnDevice,
      @NonNull Spinner spnModel, @NonNull Spinner spnTracker,
      @NonNull SwitchCompat swPoseClassification, @NonNull TextView tvClassificationValue1,
      @NonNull TextView tvClassificationValue2, @NonNull TextView tvClassificationValue3,
      @NonNull TextView tvFps, @NonNull TextView tvScore,
      @NonNull RelativeLayout vClassificationOption, @NonNull LinearLayout vTrackerOption) {
    this.rootView = rootView;
    this.bottomSheet = bottomSheet;
    this.spnDevice = spnDevice;
    this.spnModel = spnModel;
    this.spnTracker = spnTracker;
    this.swPoseClassification = swPoseClassification;
    this.tvClassificationValue1 = tvClassificationValue1;
    this.tvClassificationValue2 = tvClassificationValue2;
    this.tvClassificationValue3 = tvClassificationValue3;
    this.tvFps = tvFps;
    this.tvScore = tvScore;
    this.vClassificationOption = vClassificationOption;
    this.vTrackerOption = vTrackerOption;
  }

  @Override
  @NonNull
  public LinearLayoutCompat getRoot() {
    return rootView;
  }

  @NonNull
  public static BottomSheetLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottomSheetLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bottom_sheet_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottomSheetLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayoutCompat bottomSheet = (LinearLayoutCompat) rootView;

      id = R.id.spnDevice;
      Spinner spnDevice = ViewBindings.findChildViewById(rootView, id);
      if (spnDevice == null) {
        break missingId;
      }

      id = R.id.spnModel;
      Spinner spnModel = ViewBindings.findChildViewById(rootView, id);
      if (spnModel == null) {
        break missingId;
      }

      id = R.id.spnTracker;
      Spinner spnTracker = ViewBindings.findChildViewById(rootView, id);
      if (spnTracker == null) {
        break missingId;
      }

      id = R.id.swPoseClassification;
      SwitchCompat swPoseClassification = ViewBindings.findChildViewById(rootView, id);
      if (swPoseClassification == null) {
        break missingId;
      }

      id = R.id.tvClassificationValue1;
      TextView tvClassificationValue1 = ViewBindings.findChildViewById(rootView, id);
      if (tvClassificationValue1 == null) {
        break missingId;
      }

      id = R.id.tvClassificationValue2;
      TextView tvClassificationValue2 = ViewBindings.findChildViewById(rootView, id);
      if (tvClassificationValue2 == null) {
        break missingId;
      }

      id = R.id.tvClassificationValue3;
      TextView tvClassificationValue3 = ViewBindings.findChildViewById(rootView, id);
      if (tvClassificationValue3 == null) {
        break missingId;
      }

      id = R.id.tvFps;
      TextView tvFps = ViewBindings.findChildViewById(rootView, id);
      if (tvFps == null) {
        break missingId;
      }

      id = R.id.tvScore;
      TextView tvScore = ViewBindings.findChildViewById(rootView, id);
      if (tvScore == null) {
        break missingId;
      }

      id = R.id.vClassificationOption;
      RelativeLayout vClassificationOption = ViewBindings.findChildViewById(rootView, id);
      if (vClassificationOption == null) {
        break missingId;
      }

      id = R.id.vTrackerOption;
      LinearLayout vTrackerOption = ViewBindings.findChildViewById(rootView, id);
      if (vTrackerOption == null) {
        break missingId;
      }

      return new BottomSheetLayoutBinding((LinearLayoutCompat) rootView, bottomSheet, spnDevice,
          spnModel, spnTracker, swPoseClassification, tvClassificationValue1,
          tvClassificationValue2, tvClassificationValue3, tvFps, tvScore, vClassificationOption,
          vTrackerOption);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
